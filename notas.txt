para PUBLICAR el estandar firebase pide crear una carpeta "public" para colocar los archivos(html, js...)
y crear un archivo "index.html"

solo Javascript

para instalar las librerias: para publicarlo y este disponible para todos los proyectos
sudo npm i -g firebase-tools

luego de la instalacion se ejecutan los comandos:
firebase login
firebase init  <- indica si es una aplicacion nueva (seleccionar con barra de espacio la opcion Hosting y NO es una single-page)
firebase deploy <- se publica (al final muestra la ruta .com)

la primera q se inicia sesion, hay q refrescar

para cambiar el dominio: inventarios-99217.firebaseapp.com
entrar al proyecto
Hosting (debemos tener nuestro propio dominio)


para angular necesitamos primero node

descargar el cliente de angular:
cli.angular.io

verificar si esta instalado angular
ng -v

para crear nuevas aplicaciones en angular (de preferencia appNombreProyecto)
ng new appInicio

si ya existe el proyecto ejecutar:
ng serve
ng server --o  (para que abra el navegador)

distribucion de archivos de angular
tsconfig.json  (archivo de configuracion maneja el typescript)
package.json (contiene los scripts q se pueden usar y paquetes instalados)
karma.conf.js (usado para pruebas unitarias)
protactor.conf.js (tambien para pruebas)
.angular-cli.json (archivo de configuracion del cliente, css, modulos principales, ubicacion de carpetas para produccion o desarrollo, archivo inicial con el q empezara angular)

el index se encuentra en appInicio -> src
el primera archivo typescript q se ejecuta es el "main.ts"

main -> appModule -> appComponent

en main.ts al final se indica que modulo se ejecuta: AppModule (ubicado dentro de la carpeta src/app)
en angular no se pone extension (se sobreentiende q la extension es "ts")
app.module ejecuta app.component

para ejecutar la aplicacion
hay que estar dentro de la carpeta appInicio
luego ejecutar el comando: ng serve   (es el ambiente de pruebas)

para no escribir los componentes a mano, se usa el generador:
dentro de appInicio:
forma larga:
ng generate component nombreComponente

forma corta:
ng g c nombreComponente

para que no instale las prubeas unitarias
ng g c nombreComponente --spec false


node_modules -> se encuentran todo lo instalado

hay q agregar las libreris de formulario de angular: app.module:
al usar ngModel -> FormsModule -> import { FormsModule } from '@angular/forms'

si se desea bootstrap, una opcion es descargarlo via npm (--save para que se graben las referencias en el package json):
npm install bootstrap@4.0.0-beta --save

para bajar librerias en node (enviar correos, etc.):
npmjs.com


para la clase 06:
empezamos con index.html
app.component.html (se borra todo)
listado.component.html
(los controladores se dividen x modulos, solo en este caso lo ponemos en app component)
app.component.ts
app.component.html (colocando las entradas: lista, servidores es la propiedad creada en el app component)
listado.component.ts (para indicar que existe la propiedad de entrada lista, ahora tambien es una propiedad de listado.component)
   @Input se ejecuta despues del constructor
  
  directivas estructurales en Angular empiezan con "*"
  luego de declarar el [item] , nos vamos a servidor.component.ts
  el Input soporta alias "Input(alias)"

en formulariocomponent.html

  entre corchetes entradas y entre parentesis salidas (eventos de botones x ejemplo)
  
  hay que crer el metodo click en el compoentn formulario
  
  al agregar la clase "button" ya no hace el reload de la pagina (para que no llame al submit del form)
variables de plantilla con # (hacen referencia a la etiqueta completa)

creacion de Eventos:
en listado.component.html (nuevoServer) -> el componente formulario necesita saber q se ha creado un evento (Output), el Emisor es el tipo de datos q se va a devolver, puede ser de cualquier clase

eventoAgregarServidor.emit() --> es como un trigger

angular augury (exension para debuggear) extension de chrome, en el Inspector del navegador se añade una pestaña "Augury"

separando las clases:
ng g class compartido/servidor

primero se ejecuta el HTML y luego Angular, es x ello q se coloca entre corchetes

ViewEncapsulation.Native  //similar a IFrame (trae sus propios estilos)   Por defecto esta con Emulated (la mas usada) y el None afecta a todas las hojas de estilo

los componentes no deberian ser los intermediaris, solo los servicios, solo en este caso lo estamos haciendo asi
del padre al hijo una propiedad
del hijo al padre un evento
